x
y
z
w
x
x
x=34
y=16
z=x+y
w=x/y
x
y
z
w
x=34
y=16
z=x+y
w=x/y
x
y
z
w
x=34
y=16
z=x+y
w=x/y
x
y
z
w
help(hist)
# List all available data sets
data()
# Load the "Orange" data set (optional here)
data(Orange)
# Display the entire Orange data set
Orange
# Display the first n = 6 rows of the Orange data set (6 is default; can be changed)
head(Orange)
?Orange
# Calculate summary statistics for all variables of the Orange data set
summary(Orange)
View(Orange)
Orange$age
mean(Orange$age)
sd(Orange$age)
plot(Orange$age, Orange$circumference)
?lm
install.packages('tinytex')
tinytex::install_tinytex()
install.packages('tinytex')
tinytex::install_tinytex()
install.packages('tinytex')
tinytex::install_tinytex()
install.packages('tinytex')
tinytex::install_tinytex()
install.packages("tinytex")
install.packages("tinytex")
---
title: "Temperatures (Rmd)"
title: "Temperatures (Rmd)"
\documentclass[12pt]{article}
---
title: "Temperatures (Rmd)"
install.packages('tinytex')
tinytex::install_tinytex()
load("~/STAT5050/SFTemps.rda")
load("/home/Peter/STAT5050/SFTemps.rda")
load("~/STAT5050/SFTemps.rda")
load("~/STAT5050/LT/L02/L02_Examples/Example 1_Rmd/Work/SFTemps.rda")
knitr::opts_chunk$set(echo = TRUE)
load("SFTemps.rda")
load("SFTemps.rda")
load("SFTemps.rda")
tempC <- function(temp) {
celsius <- ((temp - 32) * (5 / 9))
return(celsius)
}
# Answer here - and adjust the chunk options as needed
length(temp)
min(temp, na.rm = TRUE)
median(temp, na.rm = TRUE)
min(temp, na.rm = TRUE)
load("SFTemps.rda")
tempC <- function(temp) {
celsius <- ((temp - 32) * (5 / 9))
return(celsius)
}
length(temp)
median(temp, na.rm = TRUE)
min(temp, na.rm = TRUE)
min(temp, na.rm = TRUE)
min(temp, na.rm = TRUE)
max(temp, na.rm = TRUE)
a <- 0
b <- 10
xi <- 3 # This is the sample x-value for C.
# a. Write an expression to calculate the mean of x.
Mu <- 1/2*(a+b)
1/2*(a+b)
P <- (xi-a)/(b-a)
(xi-a)/(b-a)
?punif
punif(xi, min = a, max = b)
punif(xi, mi = a, ma = b)
punif(xi, a, b)
punif(xi, mn = a, mx = b)
punif(xi, max = b, min = a)
punif(max = b, min = a, xi)
punif(xi, min = a, max = b, lower.tail = TRUE)
?runif
runif(1000, min = a, max = b)
?mean
mean(xtest)
xtest = runif(1000, min = a, max = b)
# b. Calculate the sample mean of xtest.
mean(xtest)
xtest = runif(1000, min = a, max = b)
# b. Calculate the sample mean of xtest.
mean(xtest)
xtest = runif(1000, min = a, max = b)
# b. Calculate the sample mean of xtest.
mean(xtest)
xtest = runif(1000, min = a, max = b)
# b. Calculate the sample mean of xtest.
mean(xtest)
xtest = runif(1000, min = a, max = b)
# b. Calculate the sample mean of xtest.
mean(xtest)
xtest = runif(1000, min = a, max = b)
# b. Calculate the sample mean of xtest.
mean(xtest)
xtest = runif(1000, min = a, max = b)
# b. Calculate the sample mean of xtest.
mean(xtest)
xtest = runif(1000, min = a, max = b)
# b. Calculate the sample mean of xtest.
mean(xtest)
xtest = runif(1000, min = a, max = b)
# b. Calculate the sample mean of xtest.
mean(xtest)
xtest = runif(1000, min = a, max = b)
# b. Calculate the sample mean of xtest.
mean(xtest)
xtest = runif(1000, min = a, max = b)
# b. Calculate the sample mean of xtest.
mean(xtest)
xtest = runif(1000, min = a, max = b)
# b. Calculate the sample mean of xtest.
mean(xtest)
xtest = runif(1000, min = a, max = b)
# b. Calculate the sample mean of xtest.
mean(xtest)
xtest = runif(1000, min = a, max = b)
# b. Calculate the sample mean of xtest.
mean(xtest)
xtest = runif(1000, min = a, max = b)
# b. Calculate the sample mean of xtest.
mean(xtest)
xtest = runif(1000, min = a, max = b)
# b. Calculate the sample mean of xtest.
mean(xtest)
xtest = runif(1000, min = a, max = b)
# b. Calculate the sample mean of xtest.
mean(xtest)
xtest = runif(1000, min = a, max = b)
# b. Calculate the sample mean of xtest.
mean(xtest)
xtest = runif(1000, min = a, max = b)
# b. Calculate the sample mean of xtest.
mean(xtest)
xtest = runif(1000, min = a, max = b)
# b. Calculate the sample mean of xtest.
mean(xtest)
xtest = runif(1000, min = a, max = b)
# b. Calculate the sample mean of xtest.
mean(xtest)
xtest = runif(1000, min = a, max = b)
# b. Calculate the sample mean of xtest.
mean(xtest)
var(xtest)
hist(xtest)
hist(xtest)
xtest = runif(100000, min = a, max = b)
# b. Calculate the sample mean of xtest.
mean(xtest)
# c. Calculate the sample variance of xtest.
var(xtest)
# d. Plot a histogram of xtest
hist(xtest)
xtest = runif(100000, min = a, max = b)
# b. Calculate the sample mean of xtest.
mean(xtest)
# c. Calculate the sample variance of xtest.
var(xtest)
# d. Plot a histogram of xtest
hist(xtest)
xtest = runif(100000, min = a, max = b)
# b. Calculate the sample mean of xtest.
mean(xtest)
# c. Calculate the sample variance of xtest.
var(xtest)
# d. Plot a histogram of xtest
hist(xtest)
xtest = runif(100000, min = a, max = b)
# b. Calculate the sample mean of xtest.
mean(xtest)
# c. Calculate the sample variance of xtest.
var(xtest)
# d. Plot a histogram of xtest
hist(xtest)
1/12*(10-0)^2
(3-0)/(10-0)
a <- 0
b <- 10
xi <- 3 # This is the sample x-value for C.
# a. Write an expression to calculate the mean of x.
Mu <- 1/2*(a+b)
# 5.) a. Repeat problem 4 using 100000 test samples (all parts).
xtest = runif(100000, min = a, max = b)
# b. Calculate the sample mean of xtest.
mean(xtest)
mean(xtest)
seq(from=3, to=13)
seq(length=6, from = 3, to=13)
(1:6)*2 +1
seq(to=3,from=13,by=-2)
x = c(2,31,53,8,-1,20)
sort(x)
x[order(x)]
seq(1,5,by=2)
seq(1,5,length=3)
seq(1,5,length=5)
seq(1,length=5,by=2)
seq(1,length=5,by=2)
seq(1,5,length=5,by=2)
1:3
1.1:5.7
5.7:-1.1
-1:3
-(1:3)
rep(3,2)
rep(x,2)
x = c(7,1,3)
rep(x,2)
m0 = matrix(1:6, nrow = 2, ncol = 3)
mo
m0 = matrix(1:6, nrow = 2, ncol = 3)
m0
m = matrix(1:6, nrow = 2, ncol = 3, byrow = TRUE)
m
rownames(m) = c("a", "b")
colnames(m) = letters[1:3]
m
dim(m); nrow(m); ncol(m)
t(m)
m
m[-1, 2]
m["a", ]
m[, c(TRUE, TRUE, FALSE)]
x = array(1:30, c(4,3,2))
x
x[1:2, 3, 2)
x[1:2, 3, 2]
x[, 2,1] #All rows, 2nd column, 1st panel.
x
x[3:4, c(3,1),1]
x[c(1,3) ,-2 , 1]
x[c(1,3) ,-1 , 1]
x[4:3, c(3,1),1] #Order matters here,
x[c(1,3) ,-1 , 1]
x[c(3,1) ,c(3,2) , 1]
x[c(3,1) ,c(3,2) , 1]
x[c(3,1) ,c(3,2) , 1]
x[c(3,1) ,c(3,2) , 1]
x[1:2, 2, 2]
d = c("a", 3)
d
?vectors
?vector
?array
nonNeg = seq(1,5)*rep(10,5)**(seq(0,4))
alternating=rep(seq(-1,1,by=2), times=3)*-1
nonNeg*alternating[-6]
data(mammals, package = "MASS")
mnames <- rownames(mammals)
mbody <- mammals$body
mbrain <- mammals$brain
mammals
mammals
mnames
head(mammals)
head(m, 10)
head(mammals, 10)
max(mammals=brain) - min(mammals=brain)
max(mammals==brain) - min(mammals==brain)
max(mbrain) - min(mbrain)
heavyBrain = max(mbrain)
x = which (mbrain == max(mbrain))
x
mnames[which (mbrain == max(mbrain))]
mnames[mbrain > 400 && mweight < 500]
mnames[mbrain > 400 & mweight < 500]
mnames[mbrain > 400 & mbody < 500]
median(mbody)
which(abs(mbody - median(mbody)) == min(abs(mbody-median(mbody))))
mnames[1]
mnames[25]
mnames[1,25]
cat(mnames[1],mnames[25])
cat(mnames[1]," ",mnames[25])
cat(mnames[1],", ",mnames[25])
which(abs(mbody - median(mbody)) == min(abs(mbody-median(mbody)))) = x
which(abs(mbody - median(mbody)) == min(abs(mbody-median(mbody))))
x = which(abs(mbody - median(mbody)) == min(abs(mbody-median(mbody))))
x = which(abs(mbody - median(mbody)) == min(abs(mbody-median(mbody))))
mnames[x]
largeRatio = mbrain/mbody
largeRatio
which.max(largeRatio)
largeRatio = mammals$mbrain/mbody
largeRatio
largeRatio = mammals$(brain/mbody)
largeRatio = mbrain/mbody
nameFrame = data.frame(mnames,largeRatio)
nameFrame
sortNameFrame = sort(nameFrame)
nameFrame
order(frameNames)
order(nameFrame)
order(largeRatio)
cat(mnames[largeRatio=1], mnames[largeRatio=2], mnames[largeRatio=3])
cat(mnames[largeRatio=1],", ", mnames[largeRatio=2], ", "mnames[largeRatio=3])
cat(mnames[largeRatio=1], mnames[largeRatio=2], mnames[largeRatio=3])
largeRatio = mbrain/mbody
cat(mnames[largeRatio=1], mnames[largeRatio=2], mnames[largeRatio=3])
cat(mnames[largeRatio=1], mnames[largeRatio=2], mnames[largeRatio=3])
largeRatio = mbrain/mbody
cat(mnames[largeRatio=1], mnames[largeRatio=2], mnames[largeRatio=3])
largeRatio = mbrain/mbody
x = [largeRatio=1], mnames[largeRatio=2], mnames[largeRatio=3]
largeRatio = mbrain/mbody
x = c([largeRatio=1], mnames[largeRatio=2], mnames[largeRatio=3])
largeRatio = mbrain/mbody
cat(mnames[largeRatio=1], mnames[largeRatio=2], mnames[largeRatio=3])
mammals
largeRatio = mbrain/mbody
cat(mnames[sort(largeRatio=1], mnames[largeRatio=2], mnames[largeRatio=3]))
largeRatio = mbrain/mbody
ordered = sort(mnames[(largeRatio=1], mnames[largeRatio=2], mnames[largeRatio=3])
largeRatio
largeVector = c(mnames[(largeRatio=1], mnames[largeRatio=2], mnames[largeRatio=3])
largeVector = c(mnames[largeRatio=1], mnames[largeRatio=2], mnames[largeRatio=3])
mnames
largeVector
cat(largeVector)
mammals
order(largeRatio)
largeRatio[order(largeRatio) = 1]
orderofRatio = order(largeRatio)
orderOfRatio
orderofRatio
mnames[orderofRatio=1]
x = which(orderofRatio == 1)
x
mnames[46]
largeRatio = mbrain/mbody
orderofRatio = order(largeRatio)
first = which(orderofRatio == 1)
second = which(orderofRatio == 2)
third = which(orderofRatio == 3)
largeVector = c(first, second, third)
mnames[largeVector]
second
largeRatio = mbrain/mbody
orderofRatio = order(largeRatio)
first = which(orderofRatio == 1)
second = which(orderofRatio == 2)
third = which(orderofRatio == 3)
largeVector = c(first, second, third)
mnames[largeVector]
largeRatio
mammals
largeRatio
order(largeRatio)
orderofRatio[62]
mnames[11]
mnames[orderofRatio[61]]
mnames[orderofRatio[60]]
mammals
mnames
orderofRatio = order(largeRatio, decreasing=TRUE)
orderofRatio
largeRatio = mbrain/mbody
largeVector = c(largeRatio[1:3])
largeVector
largeRatio = mbrain/mbody
orderofRatio = order(largeRatio, decreasing = TRUE)
largeVector = c(orderofRatio[1:3])
largeVector
mnames[largeVector]
largeRatio = mbrain/mbody
orderofRatio = order(largeRatio, decreasing = TRUE)
largeVector = c(orderofRatio[1:3])
mnames[largeVector]
dec=seq(1,3)
let = rep(letters[1:3], dec)
paste(let, seq(1,6), sep="`` ")
dec=seq(1,3)
let = rep(letters[1:3], dec)
paste(let, seq(1,6), sep="")
vec = c("Peter", "Sarah", "Joey", "Leah", "Ben")
for (x in vec) {
print(x)
}
x=1:20
r=rep(0,length(x))
for (i in 1:length(x)){
y[i]=x[i]^2
}
y
y=x^2
t
y
x=1:20
y=rep(0,length(x))
y[1]
for (i in 2:length(x)){
y[i]=x[i]+y[i-1]
}
y
sample(c(1,0), size=1, prob=c(p,1-p))
p=.5
sample(c(1,0), size=1, prob=c(p,1-p))
max.iter = 1000
x = 0
steps=0
while(x<10){
x = x + sample(c(0,1),1)
steps = steps + 1
if (steps == max.iter){
warning("Maximum iteration reached")
break
}
}
x = 0
while(x <= 10){
x = x+1
}
x
fheight
fheight
load("family.rda")
setwd("~/RS/LTg")
load("family.rda")
fheight * 2.54
Nyears <- function(x) length(unique(floor(x)))
sapply(day, Nyears)
load("rain.rda")
load("rain.rda")
sapply(day, Nyears)
Nyears <- function(x) length(unique(floor(x)))
sapply(day, Nyears)
sapply(day,function9x) length(unique(floor(x)))
sapply(day,function(x) length(unique(floor(x)))
Nyears <- function(x) length(unique(floor(x)))
Nyears <- function(x) length(unique(floor(x)))
sapply(day, Nyears)
sapply(day, function(x) length(unique(floor(x)))
c
args(median)
Convert <- function(x)x*2.54
Convert
x=2
if (any(x < -1 | x>1))
warning("Value(s) in x outside the interval [-1,1]")
x = 0
if (any(x < -1 | x>1))
warning("Value(s) in x outside the interval [-1,1]")
if (any(x <=0))y <- log(1+x) else y<-log(x)
x=0
if (any(x <=0)) y <- log(1+x) else y<-log(x)
y
if (any(x<=0)) x<- 1 + x
y<-log(x)
y
corplot <- function(x,y,plotit=TRUE){
if (plotit) plot(x,y)
cor(x,y)
}
if(!is.matrix(m) stop("m must be a matrix"))
if(!is.matrix(m)) stop("m must be a matrix"))
if(!is.matrix(m)) stop("m must be a matrix"))
if(!is.matrix(m) stop("m must be a matrix"))
if(!is.matrix(m)) stop("m must be a matrix")
m=0
if(!is.matrix(m)) stop("m must be a matrix")
ratio <- if(x !=0) y/x else NA
normt <- function(n,dist){
if (dist == "normal"){
return (rnorm(n))
}else if (dist == "t"){
return(rt(n,df=1,ncp=0))
}else{
stop("distribution not implemented")
}
}
ratio <- ifelse(x != 0, y/x, NA)
US.indicator <- ifelse(country == "USA",1,0)
country = "China"
US.indicator <- ifelse(country == "USA",1,0)
US.indicator
