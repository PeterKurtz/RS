tempC <- function(temp) {
celsius <- ((temp - 32) * (5 / 9))
return(celsius)
}
# Answer here - and adjust the chunk options as needed
length(temp)
min(temp, na.rm = TRUE)
median(temp, na.rm = TRUE)
min(temp, na.rm = TRUE)
load("SFTemps.rda")
tempC <- function(temp) {
celsius <- ((temp - 32) * (5 / 9))
return(celsius)
}
length(temp)
median(temp, na.rm = TRUE)
min(temp, na.rm = TRUE)
min(temp, na.rm = TRUE)
min(temp, na.rm = TRUE)
max(temp, na.rm = TRUE)
a <- 0
b <- 10
xi <- 3 # This is the sample x-value for C.
# a. Write an expression to calculate the mean of x.
Mu <- 1/2*(a+b)
1/2*(a+b)
P <- (xi-a)/(b-a)
(xi-a)/(b-a)
?punif
punif(xi, min = a, max = b)
punif(xi, mi = a, ma = b)
punif(xi, a, b)
punif(xi, mn = a, mx = b)
punif(xi, max = b, min = a)
punif(max = b, min = a, xi)
punif(xi, min = a, max = b, lower.tail = TRUE)
?runif
runif(1000, min = a, max = b)
?mean
mean(xtest)
xtest = runif(1000, min = a, max = b)
# b. Calculate the sample mean of xtest.
mean(xtest)
xtest = runif(1000, min = a, max = b)
# b. Calculate the sample mean of xtest.
mean(xtest)
xtest = runif(1000, min = a, max = b)
# b. Calculate the sample mean of xtest.
mean(xtest)
xtest = runif(1000, min = a, max = b)
# b. Calculate the sample mean of xtest.
mean(xtest)
xtest = runif(1000, min = a, max = b)
# b. Calculate the sample mean of xtest.
mean(xtest)
xtest = runif(1000, min = a, max = b)
# b. Calculate the sample mean of xtest.
mean(xtest)
xtest = runif(1000, min = a, max = b)
# b. Calculate the sample mean of xtest.
mean(xtest)
xtest = runif(1000, min = a, max = b)
# b. Calculate the sample mean of xtest.
mean(xtest)
xtest = runif(1000, min = a, max = b)
# b. Calculate the sample mean of xtest.
mean(xtest)
xtest = runif(1000, min = a, max = b)
# b. Calculate the sample mean of xtest.
mean(xtest)
xtest = runif(1000, min = a, max = b)
# b. Calculate the sample mean of xtest.
mean(xtest)
xtest = runif(1000, min = a, max = b)
# b. Calculate the sample mean of xtest.
mean(xtest)
xtest = runif(1000, min = a, max = b)
# b. Calculate the sample mean of xtest.
mean(xtest)
xtest = runif(1000, min = a, max = b)
# b. Calculate the sample mean of xtest.
mean(xtest)
xtest = runif(1000, min = a, max = b)
# b. Calculate the sample mean of xtest.
mean(xtest)
xtest = runif(1000, min = a, max = b)
# b. Calculate the sample mean of xtest.
mean(xtest)
xtest = runif(1000, min = a, max = b)
# b. Calculate the sample mean of xtest.
mean(xtest)
xtest = runif(1000, min = a, max = b)
# b. Calculate the sample mean of xtest.
mean(xtest)
xtest = runif(1000, min = a, max = b)
# b. Calculate the sample mean of xtest.
mean(xtest)
xtest = runif(1000, min = a, max = b)
# b. Calculate the sample mean of xtest.
mean(xtest)
xtest = runif(1000, min = a, max = b)
# b. Calculate the sample mean of xtest.
mean(xtest)
xtest = runif(1000, min = a, max = b)
# b. Calculate the sample mean of xtest.
mean(xtest)
var(xtest)
hist(xtest)
hist(xtest)
xtest = runif(100000, min = a, max = b)
# b. Calculate the sample mean of xtest.
mean(xtest)
# c. Calculate the sample variance of xtest.
var(xtest)
# d. Plot a histogram of xtest
hist(xtest)
xtest = runif(100000, min = a, max = b)
# b. Calculate the sample mean of xtest.
mean(xtest)
# c. Calculate the sample variance of xtest.
var(xtest)
# d. Plot a histogram of xtest
hist(xtest)
xtest = runif(100000, min = a, max = b)
# b. Calculate the sample mean of xtest.
mean(xtest)
# c. Calculate the sample variance of xtest.
var(xtest)
# d. Plot a histogram of xtest
hist(xtest)
xtest = runif(100000, min = a, max = b)
# b. Calculate the sample mean of xtest.
mean(xtest)
# c. Calculate the sample variance of xtest.
var(xtest)
# d. Plot a histogram of xtest
hist(xtest)
1/12*(10-0)^2
(3-0)/(10-0)
a <- 0
b <- 10
xi <- 3 # This is the sample x-value for C.
# a. Write an expression to calculate the mean of x.
Mu <- 1/2*(a+b)
# 5.) a. Repeat problem 4 using 100000 test samples (all parts).
xtest = runif(100000, min = a, max = b)
# b. Calculate the sample mean of xtest.
mean(xtest)
mean(xtest)
seq(from=3, to=13)
seq(length=6, from = 3, to=13)
(1:6)*2 +1
seq(to=3,from=13,by=-2)
x = c(2,31,53,8,-1,20)
sort(x)
x[order(x)]
seq(1,5,by=2)
seq(1,5,length=3)
seq(1,5,length=5)
seq(1,length=5,by=2)
seq(1,length=5,by=2)
seq(1,5,length=5,by=2)
1:3
1.1:5.7
5.7:-1.1
-1:3
-(1:3)
rep(3,2)
rep(x,2)
x = c(7,1,3)
rep(x,2)
m0 = matrix(1:6, nrow = 2, ncol = 3)
mo
m0 = matrix(1:6, nrow = 2, ncol = 3)
m0
m = matrix(1:6, nrow = 2, ncol = 3, byrow = TRUE)
m
rownames(m) = c("a", "b")
colnames(m) = letters[1:3]
m
dim(m); nrow(m); ncol(m)
t(m)
m
m[-1, 2]
m["a", ]
m[, c(TRUE, TRUE, FALSE)]
x = array(1:30, c(4,3,2))
x
x[1:2, 3, 2)
x[1:2, 3, 2]
x[, 2,1] #All rows, 2nd column, 1st panel.
x
x[3:4, c(3,1),1]
x[c(1,3) ,-2 , 1]
x[c(1,3) ,-1 , 1]
x[4:3, c(3,1),1] #Order matters here,
x[c(1,3) ,-1 , 1]
x[c(3,1) ,c(3,2) , 1]
x[c(3,1) ,c(3,2) , 1]
x[c(3,1) ,c(3,2) , 1]
x[c(3,1) ,c(3,2) , 1]
x[1:2, 2, 2]
d = c("a", 3)
d
?vectors
?vector
?array
nonNeg = seq(1,5)*rep(10,5)**(seq(0,4))
alternating=rep(seq(-1,1,by=2), times=3)*-1
nonNeg*alternating[-6]
data(mammals, package = "MASS")
mnames <- rownames(mammals)
mbody <- mammals$body
mbrain <- mammals$brain
mammals
mammals
mnames
head(mammals)
head(m, 10)
head(mammals, 10)
max(mammals=brain) - min(mammals=brain)
max(mammals==brain) - min(mammals==brain)
max(mbrain) - min(mbrain)
heavyBrain = max(mbrain)
x = which (mbrain == max(mbrain))
x
mnames[which (mbrain == max(mbrain))]
mnames[mbrain > 400 && mweight < 500]
mnames[mbrain > 400 & mweight < 500]
mnames[mbrain > 400 & mbody < 500]
median(mbody)
which(abs(mbody - median(mbody)) == min(abs(mbody-median(mbody))))
mnames[1]
mnames[25]
mnames[1,25]
cat(mnames[1],mnames[25])
cat(mnames[1]," ",mnames[25])
cat(mnames[1],", ",mnames[25])
which(abs(mbody - median(mbody)) == min(abs(mbody-median(mbody)))) = x
which(abs(mbody - median(mbody)) == min(abs(mbody-median(mbody))))
x = which(abs(mbody - median(mbody)) == min(abs(mbody-median(mbody))))
x = which(abs(mbody - median(mbody)) == min(abs(mbody-median(mbody))))
mnames[x]
largeRatio = mbrain/mbody
largeRatio
which.max(largeRatio)
largeRatio = mammals$mbrain/mbody
largeRatio
largeRatio = mammals$(brain/mbody)
largeRatio = mbrain/mbody
nameFrame = data.frame(mnames,largeRatio)
nameFrame
sortNameFrame = sort(nameFrame)
nameFrame
order(frameNames)
order(nameFrame)
order(largeRatio)
cat(mnames[largeRatio=1], mnames[largeRatio=2], mnames[largeRatio=3])
cat(mnames[largeRatio=1],", ", mnames[largeRatio=2], ", "mnames[largeRatio=3])
cat(mnames[largeRatio=1], mnames[largeRatio=2], mnames[largeRatio=3])
largeRatio = mbrain/mbody
cat(mnames[largeRatio=1], mnames[largeRatio=2], mnames[largeRatio=3])
cat(mnames[largeRatio=1], mnames[largeRatio=2], mnames[largeRatio=3])
largeRatio = mbrain/mbody
cat(mnames[largeRatio=1], mnames[largeRatio=2], mnames[largeRatio=3])
largeRatio = mbrain/mbody
x = [largeRatio=1], mnames[largeRatio=2], mnames[largeRatio=3]
largeRatio = mbrain/mbody
x = c([largeRatio=1], mnames[largeRatio=2], mnames[largeRatio=3])
largeRatio = mbrain/mbody
cat(mnames[largeRatio=1], mnames[largeRatio=2], mnames[largeRatio=3])
mammals
largeRatio = mbrain/mbody
cat(mnames[sort(largeRatio=1], mnames[largeRatio=2], mnames[largeRatio=3]))
largeRatio = mbrain/mbody
ordered = sort(mnames[(largeRatio=1], mnames[largeRatio=2], mnames[largeRatio=3])
largeRatio
largeVector = c(mnames[(largeRatio=1], mnames[largeRatio=2], mnames[largeRatio=3])
largeVector = c(mnames[largeRatio=1], mnames[largeRatio=2], mnames[largeRatio=3])
mnames
largeVector
cat(largeVector)
mammals
order(largeRatio)
largeRatio[order(largeRatio) = 1]
orderofRatio = order(largeRatio)
orderOfRatio
orderofRatio
mnames[orderofRatio=1]
x = which(orderofRatio == 1)
x
mnames[46]
largeRatio = mbrain/mbody
orderofRatio = order(largeRatio)
first = which(orderofRatio == 1)
second = which(orderofRatio == 2)
third = which(orderofRatio == 3)
largeVector = c(first, second, third)
mnames[largeVector]
second
largeRatio = mbrain/mbody
orderofRatio = order(largeRatio)
first = which(orderofRatio == 1)
second = which(orderofRatio == 2)
third = which(orderofRatio == 3)
largeVector = c(first, second, third)
mnames[largeVector]
largeRatio
mammals
largeRatio
order(largeRatio)
orderofRatio[62]
mnames[11]
mnames[orderofRatio[61]]
mnames[orderofRatio[60]]
mammals
mnames
orderofRatio = order(largeRatio, decreasing=TRUE)
orderofRatio
largeRatio = mbrain/mbody
largeVector = c(largeRatio[1:3])
largeVector
largeRatio = mbrain/mbody
orderofRatio = order(largeRatio, decreasing = TRUE)
largeVector = c(orderofRatio[1:3])
largeVector
mnames[largeVector]
largeRatio = mbrain/mbody
orderofRatio = order(largeRatio, decreasing = TRUE)
largeVector = c(orderofRatio[1:3])
mnames[largeVector]
dec=seq(1,3)
let = rep(letters[1:3], dec)
paste(let, seq(1,6), sep="`` ")
dec=seq(1,3)
let = rep(letters[1:3], dec)
paste(let, seq(1,6), sep="")
data()
HairEyeColor
clear
clear()
Dat=Orange
View(Dat)
data(Orange)
Orange
data(ToothGrowth)
view(ToothGrowth)
View(ToothGrowth)
Orange
View(Orange)
Load("L05c_family.rda")
load("L05c_family.rda")
pwd()
setwd("~/STAT5050")
load("L05c_family.rda")
load("/home/Peter/STAT5050/LT/L06/L05c_family.rda")
load("L05c_family.rda")
setwd("~/STAT5050/LT/L06")
load("L05c_family.rda")
load("L05c_family.rda")
family = data.frame(firstName = fnames, gender = fgender, age=fage, height=fheight, weight=fweight, bmi=fbmi, overWt=foverWt)
family
class(family)
class(family)
length(family)
names(family)
family$gender
mean(family$height)
class(family$height)
family[10:13,-(3:7)]#10 through 13 people, exclude the 3rd through 7th.
family[10:13,-(3:7)]#10 through 13 people, exclude the 3rd through 7th.
family[c("j,","k","l","m"), -(3:7)]
family[10:13,-(3:7)]#10 through 13 people, exclude the 3rd through 7th.
family[c("j,","k","l","m"), -(3:7)]#Don't knowwhy but first is not showing.
family[c("i",j,","k","l","m"), -(3:7)]
family[c("i","j,","k","l","m"), -(3:7)]
family
family[c("j","k","l","m"), -(3:7)]
family[,c("gender","firstName")]
family[family$weight > 180, c("height","bmi")]
family[family$weight > 180, c("height","bmi","firstname")]
family["height"]
family[,"height"]
setwd("~/STAT5050/LT/L09")
Orange
View(Orange)
#Notes: ordered container of vectors. In vectors they must be the same type.
load("L05c_family.rda")
family = data.frame(firstName = fnames, gender = fgender, age=fage, height=fheight, weight=fweight, bmi=fbmi, overWt=foverWt)
family
class(family)
length(family)#Number of vectors
dim(family)#rows and columns
names(family)#variables stuff.
family$gender#values and levels (datafracme$vector)
mean(family$height)#means of height varaibles
class(family$height)#Class of the vector stuff
family[10:13,-(3:7)]#10 through 13 people, exclude the 3rd through 7th.
family[c("j","k","l","m"), -(3:7)]#Same as above
family[,c("gender","firstName")]#We can use empty subsetting for all.
family[family$weight > 180, c("height","bmi")]
family["height"]#This is a dataframe
family[,"height"]#This is a vector
CAquakes = read.table(file = "ms49epicenters.txt")
CAquakes = read.table(file = "L10c_ms49epicenters.txt")
dim(Caquakes)
dim(Cquakes)
dim(CAquakes)
CAquakes = read.table(file = "L10c_ms49epicenters.txt")
dim(CAquakes)
CAquakes[1:3,]
class(CAquakes)
class(Caquakes$Date)
class(CAquakes$Date)
CAquakes[1:3,]
class(CAquakes)
class(CAquakes$Date)
CAquakes
View(CAquakes)
family[,age]
family
family[,'age']
family[age,]
family['age',]
family$age
family$'age'
family[,age]
# Load the USArrests dataset into data
dat<-USArrests
names(dat)
dat[, c("Murder")]
dat[,-(2:4)]
dat[,1]
assult = dat[,c("Assult")
assult = dat[,c("Assult")]
assult = dat[,c("Assault")]
ord(assault)
order(assault)
assault = dat[,c("Assault")]
order(assault)
sort(assault)
fiveLowestAssault = sortedAssault[1:5]
assault = dat[,c("Assault")]
sortedAssault = sort(assault)
fiveLowestAssault = sortedAssault[1:5]
fiveLowestAssault
dat
urbanPop = dat[,c("UrbanPop")]
urbanPop
order(urbanPop)
order(urbanPop, decreasing = TRUE)
urbanPop = dat[,c("UrbanPop")]
orderStates = order(urbanPop, decreasing = TRUE)
orderStates[1:5]
Ind = orderStates[1:5]
Ind
dat[,Ind]
dat[Ind,]
summary(dat)
?USArrests
dat
murderRate = dat[,c("Murder")]
sortMurderRate = sort(murderRate)
murderRate
sortMurderRate
sortMurderRate = ord(murderRate)
murderRate = dat[,c("Murder")]
sortMurderRate = order(murderRate)
sortMurderRate
urbanPop = dat[,c("UrbanPop")]
orderStates = order(urbanPop, decreasing = TRUE)
Ind = orderStates[1:5]
Ind
dat[Ind,]
orderStates = order(urbanPop, decreasing = TRUE)
orderStates
murderRate = dat[,c("Murder")]
sortMurderRate = order(murderRate)
dat_sort[sortMurderRate,]
murderRate = dat[,c("Murder")]
sortMurderRate = order(murderRate)
dat_sort=dat[sortMurderRate,]
dat_sort
dat
murderRate = dat[,c("Murder")]
sortMurderRate = order(murderRate)
dat_sort=dat[sortMurderRate,]
ind<-order(dat$Murder)
sort(dat$Murder)
ind
dat[34,]
dat[ind[1:5],]
dat[ind,]
ind<-order(dat$Murder)
ind
sort(ind)
sort(dat$Murder)
tail(dat_sort)
head(dat_sort)
plot(dat[,c("urbanPop")], dat[,c("Murder")])
plot(dat[,c("UrbanPop")], dat[,c("Murder")])
plot(dat[,c("UrbanPop")], dat[,c("Rape")])
plot(dat[,c("UrbanPop")], dat[,c("Assault")])
summary(dat)
dat[Ind,]
murderRate = dat[,c("Murder")]
murderRate
sortMurderRate = order(murderRate)
sortMurderRate
dat_sort=dat[sortMurderRate,]
dat_sort
?lm
