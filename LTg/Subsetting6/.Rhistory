return(celsius)
}
# Answer here - and adjust the chunk options as needed
length(temp)
min(temp, na.rm = TRUE)
median(temp, na.rm = TRUE)
min(temp, na.rm = TRUE)
load("SFTemps.rda")
tempC <- function(temp) {
celsius <- ((temp - 32) * (5 / 9))
return(celsius)
}
length(temp)
median(temp, na.rm = TRUE)
min(temp, na.rm = TRUE)
min(temp, na.rm = TRUE)
min(temp, na.rm = TRUE)
max(temp, na.rm = TRUE)
a <- 0
b <- 10
xi <- 3 # This is the sample x-value for C.
# a. Write an expression to calculate the mean of x.
Mu <- 1/2*(a+b)
1/2*(a+b)
P <- (xi-a)/(b-a)
(xi-a)/(b-a)
?punif
punif(xi, min = a, max = b)
punif(xi, mi = a, ma = b)
punif(xi, a, b)
punif(xi, mn = a, mx = b)
punif(xi, max = b, min = a)
punif(max = b, min = a, xi)
punif(xi, min = a, max = b, lower.tail = TRUE)
?runif
runif(1000, min = a, max = b)
?mean
mean(xtest)
xtest = runif(1000, min = a, max = b)
# b. Calculate the sample mean of xtest.
mean(xtest)
xtest = runif(1000, min = a, max = b)
# b. Calculate the sample mean of xtest.
mean(xtest)
xtest = runif(1000, min = a, max = b)
# b. Calculate the sample mean of xtest.
mean(xtest)
xtest = runif(1000, min = a, max = b)
# b. Calculate the sample mean of xtest.
mean(xtest)
xtest = runif(1000, min = a, max = b)
# b. Calculate the sample mean of xtest.
mean(xtest)
xtest = runif(1000, min = a, max = b)
# b. Calculate the sample mean of xtest.
mean(xtest)
xtest = runif(1000, min = a, max = b)
# b. Calculate the sample mean of xtest.
mean(xtest)
xtest = runif(1000, min = a, max = b)
# b. Calculate the sample mean of xtest.
mean(xtest)
xtest = runif(1000, min = a, max = b)
# b. Calculate the sample mean of xtest.
mean(xtest)
xtest = runif(1000, min = a, max = b)
# b. Calculate the sample mean of xtest.
mean(xtest)
xtest = runif(1000, min = a, max = b)
# b. Calculate the sample mean of xtest.
mean(xtest)
xtest = runif(1000, min = a, max = b)
# b. Calculate the sample mean of xtest.
mean(xtest)
xtest = runif(1000, min = a, max = b)
# b. Calculate the sample mean of xtest.
mean(xtest)
xtest = runif(1000, min = a, max = b)
# b. Calculate the sample mean of xtest.
mean(xtest)
xtest = runif(1000, min = a, max = b)
# b. Calculate the sample mean of xtest.
mean(xtest)
xtest = runif(1000, min = a, max = b)
# b. Calculate the sample mean of xtest.
mean(xtest)
xtest = runif(1000, min = a, max = b)
# b. Calculate the sample mean of xtest.
mean(xtest)
xtest = runif(1000, min = a, max = b)
# b. Calculate the sample mean of xtest.
mean(xtest)
xtest = runif(1000, min = a, max = b)
# b. Calculate the sample mean of xtest.
mean(xtest)
xtest = runif(1000, min = a, max = b)
# b. Calculate the sample mean of xtest.
mean(xtest)
xtest = runif(1000, min = a, max = b)
# b. Calculate the sample mean of xtest.
mean(xtest)
xtest = runif(1000, min = a, max = b)
# b. Calculate the sample mean of xtest.
mean(xtest)
var(xtest)
hist(xtest)
hist(xtest)
xtest = runif(100000, min = a, max = b)
# b. Calculate the sample mean of xtest.
mean(xtest)
# c. Calculate the sample variance of xtest.
var(xtest)
# d. Plot a histogram of xtest
hist(xtest)
xtest = runif(100000, min = a, max = b)
# b. Calculate the sample mean of xtest.
mean(xtest)
# c. Calculate the sample variance of xtest.
var(xtest)
# d. Plot a histogram of xtest
hist(xtest)
xtest = runif(100000, min = a, max = b)
# b. Calculate the sample mean of xtest.
mean(xtest)
# c. Calculate the sample variance of xtest.
var(xtest)
# d. Plot a histogram of xtest
hist(xtest)
xtest = runif(100000, min = a, max = b)
# b. Calculate the sample mean of xtest.
mean(xtest)
# c. Calculate the sample variance of xtest.
var(xtest)
# d. Plot a histogram of xtest
hist(xtest)
1/12*(10-0)^2
(3-0)/(10-0)
a <- 0
b <- 10
xi <- 3 # This is the sample x-value for C.
# a. Write an expression to calculate the mean of x.
Mu <- 1/2*(a+b)
# 5.) a. Repeat problem 4 using 100000 test samples (all parts).
xtest = runif(100000, min = a, max = b)
# b. Calculate the sample mean of xtest.
mean(xtest)
mean(xtest)
seq(from=3, to=13)
seq(length=6, from = 3, to=13)
(1:6)*2 +1
seq(to=3,from=13,by=-2)
x = c(2,31,53,8,-1,20)
sort(x)
x[order(x)]
seq(1,5,by=2)
seq(1,5,length=3)
seq(1,5,length=5)
seq(1,length=5,by=2)
seq(1,length=5,by=2)
seq(1,5,length=5,by=2)
1:3
1.1:5.7
5.7:-1.1
-1:3
-(1:3)
rep(3,2)
rep(x,2)
x = c(7,1,3)
rep(x,2)
m0 = matrix(1:6, nrow = 2, ncol = 3)
mo
m0 = matrix(1:6, nrow = 2, ncol = 3)
m0
m = matrix(1:6, nrow = 2, ncol = 3, byrow = TRUE)
m
rownames(m) = c("a", "b")
colnames(m) = letters[1:3]
m
dim(m); nrow(m); ncol(m)
t(m)
m
m[-1, 2]
m["a", ]
m[, c(TRUE, TRUE, FALSE)]
x = array(1:30, c(4,3,2))
x
x[1:2, 3, 2)
x[1:2, 3, 2]
x[, 2,1] #All rows, 2nd column, 1st panel.
x
x[3:4, c(3,1),1]
x[c(1,3) ,-2 , 1]
x[c(1,3) ,-1 , 1]
x[4:3, c(3,1),1] #Order matters here,
x[c(1,3) ,-1 , 1]
x[c(3,1) ,c(3,2) , 1]
x[c(3,1) ,c(3,2) , 1]
x[c(3,1) ,c(3,2) , 1]
x[c(3,1) ,c(3,2) , 1]
x[1:2, 2, 2]
d = c("a", 3)
d
?vectors
?vector
?array
nonNeg = seq(1,5)*rep(10,5)**(seq(0,4))
alternating=rep(seq(-1,1,by=2), times=3)*-1
nonNeg*alternating[-6]
data(mammals, package = "MASS")
mnames <- rownames(mammals)
mbody <- mammals$body
mbrain <- mammals$brain
mammals
mammals
mnames
head(mammals)
head(m, 10)
head(mammals, 10)
max(mammals=brain) - min(mammals=brain)
max(mammals==brain) - min(mammals==brain)
max(mbrain) - min(mbrain)
heavyBrain = max(mbrain)
x = which (mbrain == max(mbrain))
x
mnames[which (mbrain == max(mbrain))]
mnames[mbrain > 400 && mweight < 500]
mnames[mbrain > 400 & mweight < 500]
mnames[mbrain > 400 & mbody < 500]
median(mbody)
which(abs(mbody - median(mbody)) == min(abs(mbody-median(mbody))))
mnames[1]
mnames[25]
mnames[1,25]
cat(mnames[1],mnames[25])
cat(mnames[1]," ",mnames[25])
cat(mnames[1],", ",mnames[25])
which(abs(mbody - median(mbody)) == min(abs(mbody-median(mbody)))) = x
which(abs(mbody - median(mbody)) == min(abs(mbody-median(mbody))))
x = which(abs(mbody - median(mbody)) == min(abs(mbody-median(mbody))))
x = which(abs(mbody - median(mbody)) == min(abs(mbody-median(mbody))))
mnames[x]
largeRatio = mbrain/mbody
largeRatio
which.max(largeRatio)
largeRatio = mammals$mbrain/mbody
largeRatio
largeRatio = mammals$(brain/mbody)
largeRatio = mbrain/mbody
nameFrame = data.frame(mnames,largeRatio)
nameFrame
sortNameFrame = sort(nameFrame)
nameFrame
order(frameNames)
order(nameFrame)
order(largeRatio)
cat(mnames[largeRatio=1], mnames[largeRatio=2], mnames[largeRatio=3])
cat(mnames[largeRatio=1],", ", mnames[largeRatio=2], ", "mnames[largeRatio=3])
cat(mnames[largeRatio=1], mnames[largeRatio=2], mnames[largeRatio=3])
largeRatio = mbrain/mbody
cat(mnames[largeRatio=1], mnames[largeRatio=2], mnames[largeRatio=3])
cat(mnames[largeRatio=1], mnames[largeRatio=2], mnames[largeRatio=3])
largeRatio = mbrain/mbody
cat(mnames[largeRatio=1], mnames[largeRatio=2], mnames[largeRatio=3])
largeRatio = mbrain/mbody
x = [largeRatio=1], mnames[largeRatio=2], mnames[largeRatio=3]
largeRatio = mbrain/mbody
x = c([largeRatio=1], mnames[largeRatio=2], mnames[largeRatio=3])
largeRatio = mbrain/mbody
cat(mnames[largeRatio=1], mnames[largeRatio=2], mnames[largeRatio=3])
mammals
largeRatio = mbrain/mbody
cat(mnames[sort(largeRatio=1], mnames[largeRatio=2], mnames[largeRatio=3]))
largeRatio = mbrain/mbody
ordered = sort(mnames[(largeRatio=1], mnames[largeRatio=2], mnames[largeRatio=3])
largeRatio
largeVector = c(mnames[(largeRatio=1], mnames[largeRatio=2], mnames[largeRatio=3])
largeVector = c(mnames[largeRatio=1], mnames[largeRatio=2], mnames[largeRatio=3])
mnames
largeVector
cat(largeVector)
mammals
order(largeRatio)
largeRatio[order(largeRatio) = 1]
orderofRatio = order(largeRatio)
orderOfRatio
orderofRatio
mnames[orderofRatio=1]
x = which(orderofRatio == 1)
x
mnames[46]
largeRatio = mbrain/mbody
orderofRatio = order(largeRatio)
first = which(orderofRatio == 1)
second = which(orderofRatio == 2)
third = which(orderofRatio == 3)
largeVector = c(first, second, third)
mnames[largeVector]
second
largeRatio = mbrain/mbody
orderofRatio = order(largeRatio)
first = which(orderofRatio == 1)
second = which(orderofRatio == 2)
third = which(orderofRatio == 3)
largeVector = c(first, second, third)
mnames[largeVector]
largeRatio
mammals
largeRatio
order(largeRatio)
orderofRatio[62]
mnames[11]
mnames[orderofRatio[61]]
mnames[orderofRatio[60]]
mammals
mnames
orderofRatio = order(largeRatio, decreasing=TRUE)
orderofRatio
largeRatio = mbrain/mbody
largeVector = c(largeRatio[1:3])
largeVector
largeRatio = mbrain/mbody
orderofRatio = order(largeRatio, decreasing = TRUE)
largeVector = c(orderofRatio[1:3])
largeVector
mnames[largeVector]
largeRatio = mbrain/mbody
orderofRatio = order(largeRatio, decreasing = TRUE)
largeVector = c(orderofRatio[1:3])
mnames[largeVector]
dec=seq(1,3)
let = rep(letters[1:3], dec)
paste(let, seq(1,6), sep="`` ")
dec=seq(1,3)
let = rep(letters[1:3], dec)
paste(let, seq(1,6), sep="")
vec = c("Peter", "Sarah", "Joey", "Leah", "Ben")
for (x in vec) {
print(x)
}
x=1:20
r=rep(0,length(x))
for (i in 1:length(x)){
y[i]=x[i]^2
}
y
y=x^2
t
y
x=1:20
y=rep(0,length(x))
y[1]
for (i in 2:length(x)){
y[i]=x[i]+y[i-1]
}
y
sample(c(1,0), size=1, prob=c(p,1-p))
p=.5
sample(c(1,0), size=1, prob=c(p,1-p))
max.iter = 1000
x = 0
steps=0
while(x<10){
x = x + sample(c(0,1),1)
steps = steps + 1
if (steps == max.iter){
warning("Maximum iteration reached")
break
}
}
x = 0
while(x <= 10){
x = x+1
}
x
#Notes
#Vector creation:
x = c(1,2,3,4)
mean(x)
class(x)
objects()
cars
objects(cars)
levels(cars)
family
load("L05c_family.rda")
setwd("~/STAT5050/LT")
#Notes
#Vector creation:
x = c(1,2,3,4)
mean(x)
#How to find out what something is.
class(x)
cars
objects(cars)
load("family.rda")
fmaily
family
family
fbmi[5]
fbmi[-26]
fbmi
fbmi[-6]
fbmi
fheigh[foverweight]
fheight[foverweight]
fheight[foverWt]
foverWt
fheight
fweight[fgender == "f"]
rep(x, 4)
seq(1,5,by=2)
seq(5,1,by=2,decreasing=TRUE)
seq(5,1,decreasing=TRUE)
seq(5,1)
order(fage)
sort(fage)
m <- matrix(1:6, nrow = 2, ncol = 3)
m
mrow <- matrix(1:6, nrow = 2, ncol = 3, byrow = TRUE)
mrow
dim(m)
nrow(m)
ncol(m)
t(m)
ar <- array(1:30, c(4,3,2))
ar
class(family)
cars
objects(cars)
load("family.rda")
family
class(family)
length(family)
family
View(nameFrame)
?family
family$gender
load("family.rda")
family
# L07a: Subsetting Exercise
# Make sure that you save this exercise in the same folder as you saved the
# family.rda file.
load("L05c_family.rda")
setwd("~/STAT5050/LT/Subsetting6")
# L07a: Subsetting Exercise
# Make sure that you save this exercise in the same folder as you saved the
# family.rda file.
load("L05c_family.rda")
#############################################
#    PART ONE: Basic Subsetting             #
#############################################
# 1.) Return the BMI for the 5th person
fbmi[5]
# 2.) Return the weight of the first 5 people
fweight
fweight[1:5]
# 3.) Return the ages of everyone but the 6th and 7th people
fage[-6:-7]
# 4.) Return the weights of all overweight people
fweight[foverWt == TRUE]
########################################################
#    PART TWO: Subsetting with logical expressions     #
########################################################
# 5.) Return the names of all men
fnames[fgender == "m"]
# 6.) Return the height of the person with the lightest weight
min(fweight)
x = which (fweight == min(fweight))
fheight[x]
fheight[fweight == min(fweight)]
# 7.) Return the names of anyone with height above 70 or weight above 180
############################################
#    PART THREE: Challenge Problems        #
############################################
# 8.) Return the names of any women with height above 70 or weight above 180
# 9.) How much heavier is the heaviest person than the tallest person?
# 10.) Return the names of any men that are heavier than the tallest person?
# 11.) Define a new variable fdelta as the difference between fdesiredWt and
# fweight. This measures the amount of weight each family member would like to
# gain / lose. Then use fdelta to answer the following questions.
# a.) What is mean of fdelta?
# b.) What is the mean of fdelta for only overweight family members
# c.) What is the mean of fdelta for women in the family
# d.) On average, do women want to lose more weight than men (yes or no)?
# e.) List the names of all of the women who want to gain weight.
# f.) Plot the relationship between fdelta (y-variable) and fbmi (x-variable)
# only for the overweight family members.
# Does there appear to be a relationship between these variables in this group?
family
dat<-USArrests
dat
class(dat)
names(dat)
dat$Murder
dat[10:13, -(3:7)]
plot(dat[,c("UrbanPop")], dat[,c("Murder")])
Ingredients <- list(cheese = c("Cheddar", "Swiss", meat = c("Ham", "Turkey", "Bologna")))
Ingredients
$cheese
Ingredients <- list(cheese = c("Cheddar", "Swiss", meat) , c("Ham", "Turkey", "Bologna")))#Makes a list.
Ingredients <- list(cheese = c("Cheddar", "Swiss", meat) , c("Ham", "Turkey", "Bologna"))#Makes a list.
Ingredients <- list(cheese = c("Cheddar", "Swiss"), mean = c("Ham", "Turkey", "Bologna"))#Makes a list.
Ingredients
Ingredients[2]
Ingredients[[2]]
Ingredients[[2]][1]
Ingredients[[2]]
Ingredients[[2]][1]
x <- 1:100
y <- x * 3 + rnorm(100)
regression.results <- lm(y~x)
names(regression.results)
