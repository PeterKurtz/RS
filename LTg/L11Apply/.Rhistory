punif(max = b, min = a, xi)
punif(xi, min = a, max = b, lower.tail = TRUE)
?runif
runif(1000, min = a, max = b)
?mean
mean(xtest)
xtest = runif(1000, min = a, max = b)
# b. Calculate the sample mean of xtest.
mean(xtest)
xtest = runif(1000, min = a, max = b)
# b. Calculate the sample mean of xtest.
mean(xtest)
xtest = runif(1000, min = a, max = b)
# b. Calculate the sample mean of xtest.
mean(xtest)
xtest = runif(1000, min = a, max = b)
# b. Calculate the sample mean of xtest.
mean(xtest)
xtest = runif(1000, min = a, max = b)
# b. Calculate the sample mean of xtest.
mean(xtest)
xtest = runif(1000, min = a, max = b)
# b. Calculate the sample mean of xtest.
mean(xtest)
xtest = runif(1000, min = a, max = b)
# b. Calculate the sample mean of xtest.
mean(xtest)
xtest = runif(1000, min = a, max = b)
# b. Calculate the sample mean of xtest.
mean(xtest)
xtest = runif(1000, min = a, max = b)
# b. Calculate the sample mean of xtest.
mean(xtest)
xtest = runif(1000, min = a, max = b)
# b. Calculate the sample mean of xtest.
mean(xtest)
xtest = runif(1000, min = a, max = b)
# b. Calculate the sample mean of xtest.
mean(xtest)
xtest = runif(1000, min = a, max = b)
# b. Calculate the sample mean of xtest.
mean(xtest)
xtest = runif(1000, min = a, max = b)
# b. Calculate the sample mean of xtest.
mean(xtest)
xtest = runif(1000, min = a, max = b)
# b. Calculate the sample mean of xtest.
mean(xtest)
xtest = runif(1000, min = a, max = b)
# b. Calculate the sample mean of xtest.
mean(xtest)
xtest = runif(1000, min = a, max = b)
# b. Calculate the sample mean of xtest.
mean(xtest)
xtest = runif(1000, min = a, max = b)
# b. Calculate the sample mean of xtest.
mean(xtest)
xtest = runif(1000, min = a, max = b)
# b. Calculate the sample mean of xtest.
mean(xtest)
xtest = runif(1000, min = a, max = b)
# b. Calculate the sample mean of xtest.
mean(xtest)
xtest = runif(1000, min = a, max = b)
# b. Calculate the sample mean of xtest.
mean(xtest)
xtest = runif(1000, min = a, max = b)
# b. Calculate the sample mean of xtest.
mean(xtest)
xtest = runif(1000, min = a, max = b)
# b. Calculate the sample mean of xtest.
mean(xtest)
var(xtest)
hist(xtest)
hist(xtest)
xtest = runif(100000, min = a, max = b)
# b. Calculate the sample mean of xtest.
mean(xtest)
# c. Calculate the sample variance of xtest.
var(xtest)
# d. Plot a histogram of xtest
hist(xtest)
xtest = runif(100000, min = a, max = b)
# b. Calculate the sample mean of xtest.
mean(xtest)
# c. Calculate the sample variance of xtest.
var(xtest)
# d. Plot a histogram of xtest
hist(xtest)
xtest = runif(100000, min = a, max = b)
# b. Calculate the sample mean of xtest.
mean(xtest)
# c. Calculate the sample variance of xtest.
var(xtest)
# d. Plot a histogram of xtest
hist(xtest)
xtest = runif(100000, min = a, max = b)
# b. Calculate the sample mean of xtest.
mean(xtest)
# c. Calculate the sample variance of xtest.
var(xtest)
# d. Plot a histogram of xtest
hist(xtest)
1/12*(10-0)^2
(3-0)/(10-0)
a <- 0
b <- 10
xi <- 3 # This is the sample x-value for C.
# a. Write an expression to calculate the mean of x.
Mu <- 1/2*(a+b)
# 5.) a. Repeat problem 4 using 100000 test samples (all parts).
xtest = runif(100000, min = a, max = b)
# b. Calculate the sample mean of xtest.
mean(xtest)
mean(xtest)
seq(from=3, to=13)
seq(length=6, from = 3, to=13)
(1:6)*2 +1
seq(to=3,from=13,by=-2)
x = c(2,31,53,8,-1,20)
sort(x)
x[order(x)]
seq(1,5,by=2)
seq(1,5,length=3)
seq(1,5,length=5)
seq(1,length=5,by=2)
seq(1,length=5,by=2)
seq(1,5,length=5,by=2)
1:3
1.1:5.7
5.7:-1.1
-1:3
-(1:3)
rep(3,2)
rep(x,2)
x = c(7,1,3)
rep(x,2)
m0 = matrix(1:6, nrow = 2, ncol = 3)
mo
m0 = matrix(1:6, nrow = 2, ncol = 3)
m0
m = matrix(1:6, nrow = 2, ncol = 3, byrow = TRUE)
m
rownames(m) = c("a", "b")
colnames(m) = letters[1:3]
m
dim(m); nrow(m); ncol(m)
t(m)
m
m[-1, 2]
m["a", ]
m[, c(TRUE, TRUE, FALSE)]
x = array(1:30, c(4,3,2))
x
x[1:2, 3, 2)
x[1:2, 3, 2]
x[, 2,1] #All rows, 2nd column, 1st panel.
x
x[3:4, c(3,1),1]
x[c(1,3) ,-2 , 1]
x[c(1,3) ,-1 , 1]
x[4:3, c(3,1),1] #Order matters here,
x[c(1,3) ,-1 , 1]
x[c(3,1) ,c(3,2) , 1]
x[c(3,1) ,c(3,2) , 1]
x[c(3,1) ,c(3,2) , 1]
x[c(3,1) ,c(3,2) , 1]
x[1:2, 2, 2]
d = c("a", 3)
d
?vectors
?vector
?array
nonNeg = seq(1,5)*rep(10,5)**(seq(0,4))
alternating=rep(seq(-1,1,by=2), times=3)*-1
nonNeg*alternating[-6]
data(mammals, package = "MASS")
mnames <- rownames(mammals)
mbody <- mammals$body
mbrain <- mammals$brain
mammals
mammals
mnames
head(mammals)
head(m, 10)
head(mammals, 10)
max(mammals=brain) - min(mammals=brain)
max(mammals==brain) - min(mammals==brain)
max(mbrain) - min(mbrain)
heavyBrain = max(mbrain)
x = which (mbrain == max(mbrain))
x
mnames[which (mbrain == max(mbrain))]
mnames[mbrain > 400 && mweight < 500]
mnames[mbrain > 400 & mweight < 500]
mnames[mbrain > 400 & mbody < 500]
median(mbody)
which(abs(mbody - median(mbody)) == min(abs(mbody-median(mbody))))
mnames[1]
mnames[25]
mnames[1,25]
cat(mnames[1],mnames[25])
cat(mnames[1]," ",mnames[25])
cat(mnames[1],", ",mnames[25])
which(abs(mbody - median(mbody)) == min(abs(mbody-median(mbody)))) = x
which(abs(mbody - median(mbody)) == min(abs(mbody-median(mbody))))
x = which(abs(mbody - median(mbody)) == min(abs(mbody-median(mbody))))
x = which(abs(mbody - median(mbody)) == min(abs(mbody-median(mbody))))
mnames[x]
largeRatio = mbrain/mbody
largeRatio
which.max(largeRatio)
largeRatio = mammals$mbrain/mbody
largeRatio
largeRatio = mammals$(brain/mbody)
largeRatio = mbrain/mbody
nameFrame = data.frame(mnames,largeRatio)
nameFrame
sortNameFrame = sort(nameFrame)
nameFrame
order(frameNames)
order(nameFrame)
order(largeRatio)
cat(mnames[largeRatio=1], mnames[largeRatio=2], mnames[largeRatio=3])
cat(mnames[largeRatio=1],", ", mnames[largeRatio=2], ", "mnames[largeRatio=3])
cat(mnames[largeRatio=1], mnames[largeRatio=2], mnames[largeRatio=3])
largeRatio = mbrain/mbody
cat(mnames[largeRatio=1], mnames[largeRatio=2], mnames[largeRatio=3])
cat(mnames[largeRatio=1], mnames[largeRatio=2], mnames[largeRatio=3])
largeRatio = mbrain/mbody
cat(mnames[largeRatio=1], mnames[largeRatio=2], mnames[largeRatio=3])
largeRatio = mbrain/mbody
x = [largeRatio=1], mnames[largeRatio=2], mnames[largeRatio=3]
largeRatio = mbrain/mbody
x = c([largeRatio=1], mnames[largeRatio=2], mnames[largeRatio=3])
largeRatio = mbrain/mbody
cat(mnames[largeRatio=1], mnames[largeRatio=2], mnames[largeRatio=3])
mammals
largeRatio = mbrain/mbody
cat(mnames[sort(largeRatio=1], mnames[largeRatio=2], mnames[largeRatio=3]))
largeRatio = mbrain/mbody
ordered = sort(mnames[(largeRatio=1], mnames[largeRatio=2], mnames[largeRatio=3])
largeRatio
largeVector = c(mnames[(largeRatio=1], mnames[largeRatio=2], mnames[largeRatio=3])
largeVector = c(mnames[largeRatio=1], mnames[largeRatio=2], mnames[largeRatio=3])
mnames
largeVector
cat(largeVector)
mammals
order(largeRatio)
largeRatio[order(largeRatio) = 1]
orderofRatio = order(largeRatio)
orderOfRatio
orderofRatio
mnames[orderofRatio=1]
x = which(orderofRatio == 1)
x
mnames[46]
largeRatio = mbrain/mbody
orderofRatio = order(largeRatio)
first = which(orderofRatio == 1)
second = which(orderofRatio == 2)
third = which(orderofRatio == 3)
largeVector = c(first, second, third)
mnames[largeVector]
second
largeRatio = mbrain/mbody
orderofRatio = order(largeRatio)
first = which(orderofRatio == 1)
second = which(orderofRatio == 2)
third = which(orderofRatio == 3)
largeVector = c(first, second, third)
mnames[largeVector]
largeRatio
mammals
largeRatio
order(largeRatio)
orderofRatio[62]
mnames[11]
mnames[orderofRatio[61]]
mnames[orderofRatio[60]]
mammals
mnames
orderofRatio = order(largeRatio, decreasing=TRUE)
orderofRatio
largeRatio = mbrain/mbody
largeVector = c(largeRatio[1:3])
largeVector
largeRatio = mbrain/mbody
orderofRatio = order(largeRatio, decreasing = TRUE)
largeVector = c(orderofRatio[1:3])
largeVector
mnames[largeVector]
largeRatio = mbrain/mbody
orderofRatio = order(largeRatio, decreasing = TRUE)
largeVector = c(orderofRatio[1:3])
mnames[largeVector]
dec=seq(1,3)
let = rep(letters[1:3], dec)
paste(let, seq(1,6), sep="`` ")
dec=seq(1,3)
let = rep(letters[1:3], dec)
paste(let, seq(1,6), sep="")
vec = c("Peter", "Sarah", "Joey", "Leah", "Ben")
for (x in vec) {
print(x)
}
x=1:20
r=rep(0,length(x))
for (i in 1:length(x)){
y[i]=x[i]^2
}
y
y=x^2
t
y
x=1:20
y=rep(0,length(x))
y[1]
for (i in 2:length(x)){
y[i]=x[i]+y[i-1]
}
y
sample(c(1,0), size=1, prob=c(p,1-p))
p=.5
sample(c(1,0), size=1, prob=c(p,1-p))
max.iter = 1000
x = 0
steps=0
while(x<10){
x = x + sample(c(0,1),1)
steps = steps + 1
if (steps == max.iter){
warning("Maximum iteration reached")
break
}
}
x = 0
while(x <= 10){
x = x+1
}
x
load('hw04_SFhousing.rda')
setwd("~/RS/HWg/HW4")
load('hw04_SFhousing.rda')
load('hw04_SFHousing.rda')
setwd("~/RS/LTg/L11Apply")
load("L11c_rainfallCO.rda")
lapply(rain,mean)#Mean of each station. Here we get a list.
sapply(rain,mean)#Here we get a vector
args(lapply)
lapply(rain, mean, na.rm = TRUE, trim = 0.1)
x = 1:10
v <- c(1,1,1,0,0,0,1,1,1,0)
tapply(x, v, mean)
mean(x[v==0])
mean(x[v==1])
tapply(x, v, median)
sapply(rain, max)
sapply(rain, quantile, probs = 0.99)
all(sapply(rain, length) == sapply(day, length))
Year <- lapply(day, floor)
Uyear <- lapply(Year, unique)
OpYear <- sapply(Uyear, length)
length(unique(floor(day[[1]])))
sapply(day, function(x) length(unique(floor(x))))
sapply(rain, function(x) sum(x>0)/length(x))
sapply(rain, function(x) mean(x>0))
m <- matrix(1:6, nrow = 2)
apply(m, 1, sum)
apply(m, 2, sum)
lapply(rain,mean)#Mean of each station. Here we get a list.
sapply(rain,mean)#Here we get a vector
lapply(rain,mean)#Mean of each station. Here we get a list.
sapply(rain,mean)#Here we get a vector
args(lapply)
lapply(rain, mean, na.rm = TRUE, trim = 0.1)
x = 1:10
v <- c(1,1,1,0,0,0,1,1,1,0)
tapply(x, v, mean)
mean(x[v==0])
mean(x[v==1])
tapply(x, v, median)
sapply(rain, max)
sapply(rain, quantile, probs = 0.99)
all(sapply(rain, length) == sapply(day, length))
Year <- lapply(day, floor)
Uyear <- lapply(Year, unique)
OpYear <- sapply(Uyear, length)
length(unique(floor(day[[1]])))
sapply(day, function(x) length(unique(floor(x))))
sapply(rain, function(x) sum(x>0)/length(x))
sapply(rain, function(x) mean(x>0))
m <- matrix(1:6, nrow = 2)
apply(m, 1, sum)
apply(m, 2, sum)
?apply
m <- matrix(1, nrows=1000, ncol = 2000)
m <- matrix(1, nrow=1000, ncol = 2000)
m
t <- matrix(2, 10,10)
t
m <- matrix(1:6, nrow = 2)
apply(m, 1, sum)
apply(m, 2, sum)
m
sum(m)
m <- matrix(1, nrow=1000, ncol = 2000)
# 2.) Calculate the sum of all elements in the matrix
#HINT: use the sum function
sum(m)
m <- matrix(1:6, nrow = 2)
apply(m, 1, sum)
apply(m, 2, sum)
t <- matrix(1:6, nrow = 2)
apply(t, 1, sum)
apply(t, 2, sum)
t <- matrix(1:6, nrow = 2)
t
apply(t, 1, sum)
apply(t, 2, sum)
v1 <- apply(m, 2, sum)
v1
# 1.) Build a matrix of ones with 1000 rows and 2000 columns
#HINT: use the matrix function
m <- matrix(1, nrow=1000, ncol = 2000)
# 2.) Calculate the sum of all elements in the matrix
#HINT: use the sum function
sum(m)
# 3.) a. use apply and sum on the matrix to make a vector of column sums.
# Name the result v1.
# Note: Make sure you have assigned the margin argument correctly.
v1 <- apply(m, 2, sum)
v1
all(v1==colSums(m))
vRow <- apply(m, 1, sum)
all(vRow==rowSums(m))
mtcars
load("L11c_rainfallCO.rda")
lapply(rain,mean)#Mean of each station. Here we get a list.
sapply(rain,mean)#Here we get a vector
lapply(dat,mean)
# Load the Motor Trend Car Road Tests dataset into the dat variable
dat <- mtcars
# 5.) Use the apply command to return the mean value for each variable in dat
lapply(dat,mean)
dat
sapply(dat,mean)
lapply(dat,mean)
# 6.) a. Repeat question 5, using the sapply and lapply functions
sapply(dat,mean)
lapply(dat,mean)
type(sapply(dat,mean))
typeof(sapply(dat,mean))
typeof(lapply(dat,mean))
type(lapply(dat,mean))
apply(dat,mean)
apply(dat,mean)
t
apply(t, 1, sum)
apply(t, 2, sum)
load("L11c_rainfallCO.rda")
lapply(rain,mean)#Mean of each station. Here we get a list.
sapply(rain,mean)#Here we get a vector
lapply(rain, mean, na.rm = TRUE, trim = 0.1)
x = 1:10
v <- c(1,1,1,0,0,0,1,1,1,0)
tapply(x, v, mean)
mean(x[v==0])
mean(x[v==1])
t <- matrix(1:6, nrow = 2)
t
apply(t, 1, sum)
apply(t, 2, sum)
sapply(dat,mean)
lapply(dat,mean)
names(dat)
apply(dat,names(dat),mean)
apply(dat,2,mean)
apply(dat,1,mean)
# 5.) Use the apply command to return the mean value for each variable in dat
apply(dat,2,mean)
# 6.) a. Repeat question 5, using the sapply and lapply functions
sapply(dat,mean)
lapply(dat,mean)
typeof(apply(dat,2,mean))
typeof(sapply(dat,mean))
typeof(lapply(dat,mean))
sapply(dat,mean)
sapply(dat,mean)[1]
apply(dat,mean)[1]
apply(dat,2,mean)[1]
dat
tapply(x, v, median)
tapply(dat, "hp", mean)
dat
dat
x = 1:10
v <- c(1,1,1,0,0,0,1,1,1,0)
tapply(x, v, mean)
x
?tapply
dat[,c("carb")]
tapply(dat,dat[,c("carb")],mean)
dat(,c("hp"))
dat[,c("hp")]
dat(,c("hp"))
dat[,c("hp")]
tapply(dat[,c("hp")],dat[,c("carb")],mean)
tapply(dat[,c("mpg")], dat[,c("carb"),mean])
tapply(dat[,c("mpg")], dat[,c("carb"),mean)
tapply(dat[,c("mpg")], dat[,c("carb")],mean)
