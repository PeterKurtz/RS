x = which(abs(mbody - median(mbody)) == min(abs(mbody-median(mbody))))
x = which(abs(mbody - median(mbody)) == min(abs(mbody-median(mbody))))
mnames[x]
largeRatio = mbrain/mbody
largeRatio
which.max(largeRatio)
largeRatio = mammals$mbrain/mbody
largeRatio
largeRatio = mammals$(brain/mbody)
largeRatio = mbrain/mbody
nameFrame = data.frame(mnames,largeRatio)
nameFrame
sortNameFrame = sort(nameFrame)
nameFrame
order(frameNames)
order(nameFrame)
order(largeRatio)
cat(mnames[largeRatio=1], mnames[largeRatio=2], mnames[largeRatio=3])
cat(mnames[largeRatio=1],", ", mnames[largeRatio=2], ", "mnames[largeRatio=3])
cat(mnames[largeRatio=1], mnames[largeRatio=2], mnames[largeRatio=3])
largeRatio = mbrain/mbody
cat(mnames[largeRatio=1], mnames[largeRatio=2], mnames[largeRatio=3])
cat(mnames[largeRatio=1], mnames[largeRatio=2], mnames[largeRatio=3])
largeRatio = mbrain/mbody
cat(mnames[largeRatio=1], mnames[largeRatio=2], mnames[largeRatio=3])
largeRatio = mbrain/mbody
x = [largeRatio=1], mnames[largeRatio=2], mnames[largeRatio=3]
largeRatio = mbrain/mbody
x = c([largeRatio=1], mnames[largeRatio=2], mnames[largeRatio=3])
largeRatio = mbrain/mbody
cat(mnames[largeRatio=1], mnames[largeRatio=2], mnames[largeRatio=3])
mammals
largeRatio = mbrain/mbody
cat(mnames[sort(largeRatio=1], mnames[largeRatio=2], mnames[largeRatio=3]))
largeRatio = mbrain/mbody
ordered = sort(mnames[(largeRatio=1], mnames[largeRatio=2], mnames[largeRatio=3])
largeRatio
largeVector = c(mnames[(largeRatio=1], mnames[largeRatio=2], mnames[largeRatio=3])
largeVector = c(mnames[largeRatio=1], mnames[largeRatio=2], mnames[largeRatio=3])
mnames
largeVector
cat(largeVector)
mammals
order(largeRatio)
largeRatio[order(largeRatio) = 1]
orderofRatio = order(largeRatio)
orderOfRatio
orderofRatio
mnames[orderofRatio=1]
x = which(orderofRatio == 1)
x
mnames[46]
largeRatio = mbrain/mbody
orderofRatio = order(largeRatio)
first = which(orderofRatio == 1)
second = which(orderofRatio == 2)
third = which(orderofRatio == 3)
largeVector = c(first, second, third)
mnames[largeVector]
second
largeRatio = mbrain/mbody
orderofRatio = order(largeRatio)
first = which(orderofRatio == 1)
second = which(orderofRatio == 2)
third = which(orderofRatio == 3)
largeVector = c(first, second, third)
mnames[largeVector]
largeRatio
mammals
largeRatio
order(largeRatio)
orderofRatio[62]
mnames[11]
mnames[orderofRatio[61]]
mnames[orderofRatio[60]]
mammals
mnames
orderofRatio = order(largeRatio, decreasing=TRUE)
orderofRatio
largeRatio = mbrain/mbody
largeVector = c(largeRatio[1:3])
largeVector
largeRatio = mbrain/mbody
orderofRatio = order(largeRatio, decreasing = TRUE)
largeVector = c(orderofRatio[1:3])
largeVector
mnames[largeVector]
largeRatio = mbrain/mbody
orderofRatio = order(largeRatio, decreasing = TRUE)
largeVector = c(orderofRatio[1:3])
mnames[largeVector]
dec=seq(1,3)
let = rep(letters[1:3], dec)
paste(let, seq(1,6), sep="`` ")
dec=seq(1,3)
let = rep(letters[1:3], dec)
paste(let, seq(1,6), sep="")
vec = c("Peter", "Sarah", "Joey", "Leah", "Ben")
for (x in vec) {
print(x)
}
x=1:20
r=rep(0,length(x))
for (i in 1:length(x)){
y[i]=x[i]^2
}
y
y=x^2
t
y
x=1:20
y=rep(0,length(x))
y[1]
for (i in 2:length(x)){
y[i]=x[i]+y[i-1]
}
y
sample(c(1,0), size=1, prob=c(p,1-p))
p=.5
sample(c(1,0), size=1, prob=c(p,1-p))
max.iter = 1000
x = 0
steps=0
while(x<10){
x = x + sample(c(0,1),1)
steps = steps + 1
if (steps == max.iter){
warning("Maximum iteration reached")
break
}
}
x = 0
while(x <= 10){
x = x+1
}
x
load('hw04_SFHousing.rda')
setwd("~/RS/HWg/HW4")
load('hw04_SFHousing.rda')
names(housing)
is.data.frame(housing[2])
is.data.frame(housing)
names(housing)
nrow(housing)
summary(housing)
chooseVars = c("city", "zip", "price", "br", "bsqft", "year")
nearCitiesVec = c("Albany", "Alameda", "Berkeley", "Emeryville", "Oakland", "Piedmont", "San Leandro")
ind = (rownames(housing) %in% nearCitiesVec)
leaveOutVars = housing[ind,chooseVars]
nrow(leaveOutVars)
DS=c("South Carolina","Georgia","Alabama","Mississippi","Louisiana")
ind=(rownames(dat) %in% DS)
dat<-USArrests
dat$Murder
LM<-lm(dat$Murder~dat$Assault+dat$UrbanPop)
summary(LM)
DS=c("South Carolina","Georgia","Alabama","Mississippi","Louisiana")
ind=(rownames(dat) %in% DS)
dat_test=dat[ind,]
rownames(dat)
rownames(housing)
ind = (housing$city %in% nearCitiesVec)
leaveOutVars = housing[ind,chooseVars]
leaveOutVars
length(leaveOutVars)
nrow(leaveOutVars)
chooseVars = c("city", "zip", "price", "br", "bsqft", "year")
nearCitiesVec = c("Albany", "Alameda", "Berkeley", "Emeryville", "Oakland", "Piedmont", "San Leandro")
ind = (housing$city %in% nearCitiesVec)
BerkArea = housing[ind,chooseVars]
?bsqft
quantile(BerkArea)
quantile(BerkArea, na.rm=TRUE)
quantile(BerkArea$price)
quantile(BerkArea$price, .98)
type(quantile(BerkArea$price, .98))
typeof(quantile(BerkArea$price, .98))
quantile(BerkArea$price, .98)[1]
quantile(BerkArea$price, .98)[0]
quantile(BerkArea$price, .98)[2]
quantile(BerkArea$price, .98)[1]
quantile95 = quantile(BerkArea$price, .98)
quantile95
quantile95+3
quantile95
housing["price"] > quantile95
quantile95 = quantile(BerkArea$price, .98)
indQ = housing["price"] < quantile95
BerkArea = BerkArea[indQ,]
housing["price"] > quantile95
nrow(BerkArea)
quantile95P = quantile(BerkArea$price, .98)
quantile95P = quantile(BerkArea$price, .98)
chooseVars = c("city", "zip", "price", "br", "bsqft", "year")
nearCitiesVec = c("Albany", "Alameda", "Berkeley", "Emeryville", "Oakland", "Piedmont", "San Leandro")
ind = (housing$city %in% nearCitiesVec)
BerkArea = housing[ind,chooseVars]
quantile95P = quantile(BerkArea$price, .98)
indQ = housing["price"] < quantile95P
quantile95Q = quantile(BerkArea$bsqft, .98)
quantile95Q = quantile(BerkArea$bsqft, .98)
quantile95Q = quantile(BerkArea$bsqft, .98, na.rm = TRUE)
indBs = housing["bsqft"] < quantile95Q
indsCom = indQ & indBs
BerkArea = BerkArea[indCom,]
indCom = indQ & indBs
BerkArea = BerkArea[indCom,]
nrow(BerkArea)
indCom
quantile95P = quantile(BerkArea$price, .98)
chooseVars = c("city", "zip", "price", "br", "bsqft", "year")
nearCitiesVec = c("Albany", "Alameda", "Berkeley", "Emeryville", "Oakland", "Piedmont", "San Leandro")
ind = (housing$city %in% nearCitiesVec)
BerkArea = housing[ind,chooseVars]
quantile95P = quantile(BerkArea$price, .98)
indQ = housing["price"] < quantile95P
quantile95Q = quantile(BerkArea$bsqft, .98, na.rm = TRUE)
indBs = housing["bsqft"] < quantile95Q
indCom = indQ & indBs
storage = BerkArea[indCom,]
quantile95P = quantile(BerkArea$price, .98)
indQ = housing["price"] < quantile95P
quantile95Q = quantile(BerkArea$bsqft, .98)
chooseVars = c("city", "zip", "price", "br", "bsqft", "year")
nearCitiesVec = c("Albany", "Alameda", "Berkeley", "Emeryville", "Oakland", "Piedmont", "San Leandro")
ind = (housing$city %in% nearCitiesVec)
BerkArea = housing[ind,chooseVars]
nrow(BerkArea)
quantile95P = quantile(BerkArea$price, .98)
indQ = housing["price"] < quantile95P
indQ
head(indQ)
quantile95Q = quantile(BerkArea$bsqft, .98)
BerkArea[indQ]
BerkArea[indQ,]
nrow(BerkArea[indQ])
nrow(BerkArea[indQ,])
nrow(BerkArea[indBs,])
quantile95Q = quantile(BerkArea$bsqft, .98)
View(BerkArea)
View(BerkArea)
View(housing)
View(housing)
quantile95P = quantile(BerkArea$price, .98)
indQ = housing["price"] < quantile95P
quantile95Q = quantile(BerkArea$bsqft, .98, na.rm=TRUE)
indBs = housing["bsqft"] < quantile95Q
indCom = indQ & indBs
storage = BerkArea[indCom,]
nrow(storage)
View(indBs)
View(indBs)
View(indQ)
View(indQ)
View(indCom)
View(indCom)
nrow(indCom)
nrow(indQ)
nrow(indBs)
quantile95P = quantile(BerkArea$price, .98)
quantile95P
quantile95P = quantile(BerkArea$price, .98)
indQ = housing["price"] < quantile95P
quantile95Q = quantile(BerkArea$bsqft, .98, na.rm=FALSE)
quantile95P = quantile(BerkArea$price, .98)
indQ = housing["price"] < quantile95P
quantile95Q = quantile(BerkArea$bsqft, .98, na.rm=TRUE)
indBs = housing["bsqft"] < quantile95Q
indCom = indQ & indBs
storage = BerkArea[indQ & indB,]
quantile95P = quantile(BerkArea$price, .98)
indQ = housing["price"] < quantile95P
quantile95Q = quantile(BerkArea$bsqft, .98, na.rm=TRUE)
indBs = housing["bsqft"] < quantile95Q
indCom = indQ & indBs
storage = BerkArea[indQ & indBs,]
nrows(storage)
nrow(storage)
chooseVars = c("city", "zip", "price", "br", "bsqft", "year")
nearCitiesVec = c("Albany", "Alameda", "Berkeley", "Emeryville", "Oakland", "Piedmont", "San Leandro")
ind = (housing$city %in% nearCitiesVec)
BerkArea = housing[ind,chooseVars]
nrow(BerkArea)
quantile95P = quantile(BerkArea$price, .98)
indQ = housing["price"] < quantile95P
quantile95Q = quantile(BerkArea$bsqft, .98, na.rm=TRUE)
indBs = housing["bsqft"] < quantile95Q
indCom = indQ & indBs
storage = BerkArea[indQ & indBs,]
nrow(storage)
chooseVars = c("city", "zip", "price", "br", "bsqft", "year")
nearCitiesVec = c("Albany", "Alameda", "Berkeley", "Emeryville", "Oakland", "Piedmont", "San Leandro")
ind = (housing$city %in% nearCitiesVec)
BerkArea = housing[ind,chooseVars]
nrow(BerkArea)
View(BerkArea)
View(BerkArea)
quantile95P = quantile(BerkArea$price, .98)
indQ = housing["price"] < quantile95P
quantile95Q = quantile(BerkArea$bsqft, .98, na.rm=TRUE)
indBs = housing["bsqft"] < quantile95Q
indCom = indQ & indBs
BerkArea = BerkArea[indQ & indBs,]
nrow(BerkArea)
chooseVars = c("city", "zip", "price", "br", "bsqft", "year")
nearCitiesVec = c("Albany", "Alameda", "Berkeley", "Emeryville", "Oakland", "Piedmont", "San Leandro")
ind = (housing$city %in% nearCitiesVec)
BerkArea = housing[ind,chooseVars]
nrow(BerkArea)
quantile95P = quantile(BerkArea$price, .98)
indQ = housing["price"] < quantile95P
quantile95Q = quantile(BerkArea$bsqft, .98, na.rm=TRUE)
indBs = housing["bsqft"] < quantile95Q
indCom = indQ & indBs
BerkArea = BerkArea[indQ & indBs,]
nrow(BerkArea)
chooseVars = c("city", "zip", "price", "br", "bsqft", "year")
nearCitiesVec = c("Albany", "Alameda", "Berkeley", "Emeryville", "Oakland", "Piedmont", "San Leandro")
ind = (housing$city %in% nearCitiesVec)
BerkArea = housing[ind,chooseVars]
nrow(BerkArea)
quantile95P = quantile(BerkArea$price, .98)
indQ = housing["price"] < quantile95P
nrow(BerkArea)
quantile95Q = quantile(BerkArea$bsqft, .98, na.rm=TRUE)
indBs = housing["bsqft"] < quantile95Q
nrow(BerkArea)
indCom = indQ & indBs
nrow(BerkArea)
BerkArea = BerkArea[indQ & indBs,]
nrow(BerkArea)
chooseVars = c("city", "zip", "price", "br", "bsqft", "year")
nearCitiesVec = c("Albany", "Alameda", "Berkeley", "Emeryville", "Oakland", "Piedmont", "San Leandro")
ind = (housing$city %in% nearCitiesVec)
BerkArea = housing[ind,chooseVars]
nrow(BerkArea)
nrow(BerkArea)
storage=BerkArea[indQ,]
nrow(storage)
DS=c("South Carolina","Georgia","Alabama","Mississippi","Louisiana")
ind=(rownames(dat) %in% DS)
dat_test=dat[ind,]
# b.) Assign States outside of the deep south to dat_train
dat_train=dat[!ind,]
nrow(dat)
nrow(dat_test)
DS=c("South Carolina","Georgia","Alabama","Mississippi","Louisiana")
ind=(rownames(dat) %in% DS)
dat_test=dat[ind,]
ind
nrow(indCom)
nrow(indQ)
quantile95P = quantile(BerkArea$price, .98)
indQ = BerkArea["price"] < quantile95P
nrow(BerkArea)
quantile95Q = quantile(BerkArea$bsqft, .98, na.rm=TRUE)
indBs = BerkArea["bsqft"] < quantile95Q
nrow(BerkArea)
indCom = indQ & indBs
nrow(BerkArea)
storage=BerkArea[indQ,]
nrow(storage)
quantile95P = quantile(BerkArea$price, .98)
indQ = BerkArea["price"] < quantile95P
quantile95Q = quantile(BerkArea$bsqft, .98, na.rm=TRUE)
indBs = BerkArea["bsqft"] < quantile95Q
indCom = indQ & indBs
storage=BerkArea[indCom,]
nrow(storage)
View(BerkArea)
View(BerkArea)
BerkArea$price
pricepsqft = BerkArea$price / BerkArea$bsqft
pricepsqft
pricepsqft = BerkArea$price / BerkArea$bsqft
BerkArea <- Berkarea$pricepsqft
pricepsqft = BerkArea$price / BerkArea$bsqft
BerkArea <- BerkArea$pricepsqft
names(BerkArea)
pricepsqft = BerkArea$price / BerkArea$bsqft
BerkArea <- BerkArea$pricepsqft
BerkArea
chooseVars = c("city", "zip", "price", "br", "bsqft", "year")
nearCitiesVec = c("Albany", "Alameda", "Berkeley", "Emeryville", "Oakland", "Piedmont", "San Leandro")
ind = (housing$city %in% nearCitiesVec)
BerkArea = housing[ind,chooseVars]
nrow(BerkArea)
quantile95P = quantile(BerkArea$price, .98)
indQ = BerkArea["price"] < quantile95P
quantile95Q = quantile(BerkArea$bsqft, .98, na.rm=TRUE)
indBs = BerkArea["bsqft"] < quantile95Q
indCom = indQ & indBs
BerkArea=BerkArea[indCom,]
pricepsqft = BerkArea$price / BerkArea$bsqft
BerkArea$pricepsqft <- pricepsqft
names(BerkArea)
View(BerkArea)
View(BerkArea)
View(housing)
View(housing)
br6 <- BerkArea>= 6
br6 <- BerkArea$br >= 6
br6
over6 <- BerkArea$br >= 6
over6 <- BerkArea$br > 6
br6 <- br6 + 1
br6
over6 <- BerkArea$br > 6
over6 <- BerkArea$br > 6
over6
seven <- BerkArea$br == 7
seven
br6 <- BerkArea$br - seven - eight
seven <- BerkArea$br == 7
eight <- Berkarea$br == 8
seven <- BerkArea$br == 7
eight <- BerkArea$br == 8
br6 <- BerkArea$br - seven - eight
seven <- BerkArea$br == 7
eight <- BerkArea$br == 8
br6 <- BerkArea$br - seven - eight
BerkArea$br6 <- br6
seven <- BerkArea$br == 7
eight <- BerkArea$br == 8
nine <- BerkArea$br == 9
br6 <- BerkArea$br - seven - eight
BerkArea$br6 <- br6
seven <- BerkArea$br < 7
eight <- BerkArea$br < 8
br6 <- BerkArea$br - seven - eight
BerkArea$br6 <- br6
seven <- BerkArea$br > 7
eight <- BerkArea$br > 8
br6 <- BerkArea$br - seven - eight
BerkArea$br6 <- br6
seven <- BerkArea$br >= 7
eight <- BerkArea$br >= 8
br6 <- BerkArea$br - seven - eight
BerkArea$br6 <- br6
rCols <- rainbow(6, alpha = 0.25)
brCols <- rCols[br6]
plot(pricepsqft ~ bsqft, data = BerkArea,
main = "Housing Prices in the Berkeley Area",
xlab = "Size of house (square ft)",
ylab = "Price per square foot",
col = brCols, pch = 19, cex = 0.5)
rCols <- rainbow(6, alpha = 0.25)
brCols <- rCols[br6]
plot(pricepsqft ~ bsqft, data = BerkArea,
main = "Housing Prices in the Berkeley Area",
xlab = "Size of house (square ft)",
ylab = "Price per square foot",
col = brCols, pch = 19, cex = 0.5)
legend(legend = 1:6, fill = rCols, "topright")
cor(pricepsqft$BerkArea, bsqft$BerkArea)
cor(pricepsqft$BerkArea, bsqft$BerkArea)
cor(pricepsqft$BerkArea, bsqft$BerkArea)
BerkArea
cor(bsqft$BerkArea, pricepsqft$BerkArea)
bsqft$BerkArea
rCols <- rainbow(6, alpha = 0.25)
brCols <- rCols[br6]
plot(pricepsqft ~ bsqft, data = BerkArea,
main = "Housing Prices in the Berkeley Area",
xlab = "Size of house (square ft)",
ylab = "Price per square foot",
col = brCols, pch = 19, cex = 0.5)
legend(legend = 1:6, fill = rCols, "topright")
bsqft$BerkArea
cor(BerkArea$pricepsqft, BerkArea$bsqft)
cor(BerkArea$bsqft, BerkArea$pricepsqft
cor(BerkArea$bsqft, BerkArea$pricepsqft)
cor(BerkArea$bsqft, BerkArea$pricepsqft)
BerkArea$bsqft
BerkArea$pricepsqft
cor(BerkArea$pricepsqft, BerkArea$bsqft)
cor(BerkArea$pricepsqft, BerkArea$pricepsqft)
cor(BerkArea$pricepsqft, BerkArea$pricepsqft, use = "complete.obs")
cor(BerkArea$pricepsqft, BerkArea$pricepsqft, method = "pearson" ,use = "complete.obs")
cor.test(BerkArea$pricepsqft, BerkArea$pricepsqft, method = "pearson" ,use = "complete.obs")
?Titanic
Dat<-Titanic
print(Dat)
Titanic[class=!"crew"]
Titanic[,Sex="Male",Survived="Yes"] - Titanic[Class="crew",Sex="Male",Survived="Yes"]
Titanic[,Sex="Male",Survived="Yes"] - Titanic[Class="crew",Sex="Male",,Survived="Yes"]
Titanic[,Sex="Male",,Survived="Yes"] - Titanic[Class="crew",Sex="Male",,Survived="Yes"]
Titanic[,Sex="Male",,Survived="Yes"] - Titanic[Class="Crew",Sex="Male",,Survived="Yes"]
classNotCrew c("1st", "2nd", "3rd")
classNotCrew <- c("1st", "2nd", "3rd")
Titanic[classNotCrew,Sex <- "Male",,Survived="Yes"]
Titanic[Class = "Crew", Sex = "Female", Age = "Adults",]
Titanic[Class = "Crew", Sex = "Female", Age = "Adult",]
Titanic[,, Age = "Adult",Survived="Yes"]
Titanic[,, Age = "Child",Survived="Yes"]
Titanic[,, Age = "Child",Survived="No"]
Titanic[,, Age = "Adult",Survived="No"]
Titanic[,, Age = "Adult",Survived="Yes"]
Titanic[,, Age = "Child",Survived="No"]
Titanic[,, Age = "Child",Survived="Yes"]
Titanic[,, Age = "Adult",Survived="No"]
Titanic
Titanic
Titanic[,, Age = "Adult",Survived="No"]
Titanic
Titanic[Class="3rd", Age="Child", Survived = "Yes"]
Titanic[Class="3rd", ,Age="Child", Survived = "Yes"]
Titanic[Class="3rd", ,Age="Adult", Survived = "Yes"]
as.vector(Titanic[Class="3rd", ,Age="Child", Survived = "Yes"], Titanic[Class="3rd", ,Age="Adult", Survived = "Yes"])
typeof(Titanic[Class="3rd", ,Age="Child", Survived = "Yes"])
c(Titanic[Class="3rd", ,Age="Child", Survived = "Yes"], Titanic[Class="3rd", ,Age="Adult", Survived = "Yes"])
as.vector(c(Titanic[Class="3rd", ,Age="Child", Survived = "Yes"], Titanic[Class="3rd", ,Age="Adult", Survived = "Yes"]))
